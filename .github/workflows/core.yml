name: Core

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        type: boolean
        default: true
        required: true
  push:
    branches: [ master ]
    tags: [ v* ]
  pull_request:
  merge_group:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_BASEDIR: "${{ github.workspace }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Write key
        if: ${{ ( github.event_name != 'pull_request' && github.ref == 'refs/heads/master' ) || github.ref_type == 'tag' }}
        run: |
          if [ -n "${{ secrets.KEY_STORE }}" ]; then
            echo androidStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> gradle.properties
            echo androidKeyAlias='${{ secrets.ALIAS }}' >> gradle.properties
            echo androidKeyPassword='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
            echo androidStoreFile='key.jks' >> gradle.properties
            echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
          fi

      - name: Checkout libxposed/api
        uses: actions/checkout@v4
        with:
          repository: libxposed/api
          path: libxposed/api
          ref: 54582730315ba4a3d7cfaf9baf9d23c419e07006

      - name: Checkout libxposed/service
        uses: actions/checkout@v4
        with:
          repository: libxposed/service
          path: libxposed/service

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup ninja
        uses: seanmiddleditch/gha-setup-ninja@v6
        with:
          version: 1.12.1

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G
          key: ${{ runner.os }}
          restore-keys: ${{ runner.os }}
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Remove Android's cmake
        shell: bash
        run: rm -rf "$ANDROID_HOME/cmake"

      - name: Build dependencies
        working-directory: libxposed
        run: |
          echo 'org.gradle.caching=true' >> ~/.gradle/gradle.properties
          echo 'org.gradle.parallel=true' >> ~/.gradle/gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 -XX:+UseParallelGC' >> ~/.gradle/gradle.properties
          echo 'android.native.buildOutput=verbose' >> ~/.gradle/gradle.properties
          cd api
          ./gradlew publishToMavenLocal
          cd ../service
          ./gradlew publishToMavenLocal

      - name: Build with Gradle
        run: ./gradlew zipAll

      # Only proceed with release steps if this isn't a pull request
      - name: Prepare release artifact
        if: ${{ github.event_name != 'pull_request' }}
        id: prepare_release
        run: |
          # Locate and analyze the zygisk release zip
          RELEASE_ZIP=$(ls magisk-loader/release/LSPosed-v*-zygisk-release.zip | head -n 1)
          if [ -z "$RELEASE_ZIP" ]; then
            echo "Error: No zygisk release zip found!"
            exit 1
          fi
          
          # Extract useful information
          RELEASE_NAME=$(basename "$RELEASE_ZIP" .zip)
          VERSION=$(echo "$RELEASE_NAME" | sed -E 's/^LSPosed-(v.*)-zygisk-release$/\1/')
          VERSION_CODE=$(echo "$VERSION" | sed 's/^v//' | tr -d '.')
          
          echo "release_zip=$RELEASE_ZIP" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          
          echo "Found: $RELEASE_NAME with version $VERSION (code: $VERSION_CODE)"
          
          # Create log.txt (changelog) from git history
          echo "# LSPosed $VERSION Changelog" > log.txt
          echo "Released on $(date +'%Y-%m-%d')" >> log.txt
          echo "" >> log.txt
          git log -n 15 --pretty=format:"* %s" >> log.txt
          
          # Create update.json file with proper URLs
          cat > update.json <<EOF
{
  "version": "$VERSION",
  "versionCode": "$VERSION_CODE",
  "zipUrl": "https://github.com/AmirulAndalib/JingMatrix-LSPosed/releases/download/$VERSION/$RELEASE_NAME.zip",
  "changelog": "https://raw.githubusercontent.com/AmirulAndalib/JingMatrix-LSPosed/main/log.txt"
}
EOF
          
          # Extract the zip, add our files, and repack
          mkdir -p extracted
          unzip -q "$RELEASE_ZIP" -d extracted
          cp update.json extracted/
          cp log.txt extracted/
          
          (cd extracted && zip -qr "../$RELEASE_NAME.zip" .)
          
          # Verify the modified zip exists
          if [ ! -f "$RELEASE_NAME.zip" ]; then
            echo "Error: Failed to create modified release zip"
            exit 1
          fi
          echo "Modified zip file created: $RELEASE_NAME.zip"

      # Commit the update files to the repository for permanent access
      - name: Commit update files
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master' }}
        run: |
          # Copy update.json to the magisk module directory first
          mkdir -p magisk-loader/magisk_module/
          cp update.json magisk-loader/magisk_module/
          
          # Configure git
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Commit and push the files
          git add magisk-loader/magisk_module/update.json log.txt
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update module info for version ${{ steps.prepare_release.outputs.version }}"
            git push
            echo "Changes committed and pushed to repository"
          fi

      # Create GitHub release and upload assets
      - name: Create GitHub Release
        if: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) && github.event.inputs.create_release }}
        uses: softprops/action-gh-release@v2
        with:
          name: "LSPosed ${{ steps.prepare_release.outputs.version }}"
          tag_name: ${{ steps.prepare_release.outputs.version }}
          body_path: log.txt
          files: |
            ${{ steps.prepare_release.outputs.release_name }}.zip
            update.json
            log.txt
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          generate_release_notes: false
